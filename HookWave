-- List of whitelisted player names
local whitelist = {
    ["SoloisBlatant"] = true,
    ["23fgthy"] = true,
    ["HerSecretts"] = true,
    ["Lolcat_F845"] = true,
    ["User5"] = true,
    ["User6"] = true,
    ["User7"] = true,
    ["User8"] = true,
    ["User9"] = true,
    ["User10"] = true,
    ["User11"] = true,
	}
	
	-- Function to check if a player is whitelisted
	local function isWhitelisted(player)
		return whitelist[player.Name] == true
	end
	
	-- Function to handle player joining
	game.Players.PlayerAdded:Connect(function(player)
		if not isWhitelisted(player) then
			player:Kick("Not Whitelisted Broke Nigga")
		else
			print(player.Name .. " has joined the game.")
			-- Activate loadstring for whitelisted players
		end
	end)
	
	-- Check existing players
	for _, player in ipairs(game.Players:GetPlayers()) do
		if not isWhitelisted(player) then
			player:Kick("Not Whitelisted.")
		else

if (not LPH_OBFUSCATED) then
    LPH_NO_VIRTUALIZE = function(...) return (...) end;
    LPH_JIT_MAX = function(...) return (...) end;
    LPH_JIT_ULTRA = function(...) return (...) end;
end

if (StoredHook.Intro) then 
    local signal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua"))()

    local loading = Instance.new("ScreenGui"); do
    local Frame = Instance.new("Frame")
    local ImageLabel = Instance.new("ImageLabel")

    loading.Name = "loading"
    loading.Parent = gethui and gethui() or game:GetService('CoreGui')
    loading.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loading.IgnoreGuiInset = true

    Frame.Parent = loading
    Frame.BackgroundColor3 = Color3.fromRGB(54, 54, 54)
    Frame.BackgroundTransparency = 1
    Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    Frame.BorderSizePixel = 0
    Frame.Size = UDim2.new(1, 0, 1, 0)

    ImageLabel.Parent = Frame
    ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
    ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ImageLabel.BackgroundTransparency = 1.000
    ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    ImageLabel.BorderSizePixel = 0
    ImageLabel.ImageTransparency = 1
    ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
    ImageLabel.Size = UDim2.new(0, 300, 0, 200)
    ImageLabel.Image = "rbxassetid://18658698369"
    ImageLabel.ScaleType = Enum.ScaleType.Crop
    end

    local blur = Instance.new('BlurEffect', game:GetService('Lighting')); do 
    blur.Size = 0
    blur.Enabled = true
    end

    local on_gui_fade = signal.new('on_gui_fade')
    on_gui_fade:Connect(function()
    game:GetService('TweenService'):Create(loading.Frame, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
    game:GetService('TweenService'):Create(blur, TweenInfo.new(0.3), {Size = 0}):Play()
    local tween = game:GetService('TweenService'):Create(loading.Frame.ImageLabel, TweenInfo.new(0.25), {ImageTransparency = 1})
    tween:Play()
    tween.Completed:Wait()
    loading:Destroy()
    blur:Destroy()
    end)
    local function fade_in()
    game:GetService('TweenService'):Create(loading.Frame, TweenInfo.new(0.3), {BackgroundTransparency = .5}):Play()
    game:GetService('TweenService'):Create(blur, TweenInfo.new(0.3), {Size = 24}):Play()
    game:GetService('TweenService'):Create(loading.Frame.ImageLabel, TweenInfo.new(0.3), {ImageTransparency = 0}):Play()
    end

    coroutine.wrap(function()
    fade_in()
    task.wait(2)
    on_gui_fade:Fire()
    end)()

    on_gui_fade:Wait()
end

getgenv().hidden_settings = { -- hidden_settings.panic
    silent_aim = false,
    cam_aim = false,
    lockon = false,
    builtin_macro = false,
    triggerbot = false,
    anti_lock = false,
    no_clip_macro = false,
    right_click_held = false,
    esp_toggle = true,
    panic = false,
}

if (getgenv().StoredHook_executed) then return end 
getgenv().StoredHook_executed = true

if (not game:IsLoaded()) then
    game.Loaded:Wait()
end

setmetatable(getgenv().StoredHook, {
    __index = function(self, key)
        return ('WARNING: Setting not found ' .. key)
    end
})

-- // Services \\ -- 
local service = setmetatable(getrawmetatable(newproxy(true)), {
    __index = function(self, key)
        return game:GetService(key)
    end
})

local players = service.Players 
local workspace = service.Workspace 
local userinputservice = service.UserInputService
local stats = service.Stats 
local runservice = service.RunService 
local replicatedstorage = service.ReplicatedStorage
local virtualinputmanager = service.VirtualInputManager
local virtualuser = service.VirtualUser
local httpservice = service.HttpService
local coregui = service.CoreGui
local startergui = service.StarterGui

-- // Vars \\ -- 
local client = players.LocalPlayer
local camera = workspace:FindFirstChildWhichIsA('Camera')
local mouse = client:GetMouse()
local armor_table, weapons_table, target = {}, {}, {}
local tan, round, rad = math.tan, math.round, math.rad
local target_velocity, current_target, starget, ctarget, last_anti_toggle, charcon, weapon_connection, ping_gui;
local raycast, raycast_params = workspace.Raycast, RaycastParams.new()
local last_clicked, last_delta_cam_shake, last_reload, last_macro_instruction, last_anti_toggled = os.clock(), os.clock(), os.clock(), os.clock(), os.clock()
local animations, vector_pos = workspace:FindFirstChild('Animation'), Vector3.new()
local visuals = {}
local hitmarker = {}

getgenv().esp_objects = {}
getgenv().hitmarker_objs = {}

raycast_params.FilterType, raycast_params.IgnoreWater = Enum.RaycastFilterType.Blacklist, true

-- games
local games = {
    [1008451066] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePosI'}, -- Da Hood, Da Hood Aim Trainer, Da Hood Rev Trainer, Del Hood AIM, Dae Hood, Dah Aim Trainer (Copy x2), Random Hood, Da None, Moon Hood, Stomp Effects Testing, Wa Hood
    [2822549371] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePosI'},
    [4516901140] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [3581292480] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [4199644169] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [3352855991] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [4330320033] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [3384190400] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [4406690329] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [4438189451] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [4447006003] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [3639856968] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [5106782457] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'}, -- Del Hood Aim
    [5300316230] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},
    [5572393267] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos'},

    [4522666464] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}}, -- Dah Aim Trainer, Da Fights Downhill, Daf Hood, Dah Hood, Katana Hood, Dah Aim Trainer (13116617056)
    [4187972171] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [4417220740] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [4506056293] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [2647212019] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [4503807869] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [4578328847] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [5482466466] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [5665340768] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},
    [5583372356] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}},

    [4436053088] = {remote = replicatedstorage:FindFirstChild('MAINEVENT'), arg = 'MOUSE'}, -- Hood Sandbox, Hood Bank, Da Uphill, Da Downhill 
    [3712257784] = {remote = replicatedstorage:FindFirstChild('MAINEVENT'), arg = 'MOUSE'},
    [4242546167] = {remote = replicatedstorage:FindFirstChild('MAINEVENT'), arg = 'MOUSE'},
    [3712280414] = {remote = replicatedstorage:FindFirstChild('MAINEVENT'), arg = 'MOUSE'},
    [5641075481] = {remote = replicatedstorage:FindFirstChild('MAINEVENT'), arg = 'MOUSE'}, -- Da Downhill, Da Strike
    [5641076065] = {remote = replicatedstorage:FindFirstChild('MAINEVENT'), arg = 'MOUSE'},
    [5235037897] = {remote = replicatedstorage:FindFirstChild('MAINEVENT'), arg = 'MOUSE'},

    [4139970588] = {remote = client:FindFirstChild('PlayerGui') and client.PlayerGui:FindFirstChild('Script') and client.PlayerGui.Script:FindFirstChild('a')}, -- Da Hood Bot Aim Trainer, Da Casino
    [4468308086] = {remote = client:FindFirstChild('PlayerGui') and client.PlayerGui:FindFirstChild('Script') and client.PlayerGui.Script:FindFirstChild('a')},
    
    [5223379709] = {remote = replicatedstorage:FindFirstChild("assets") and replicatedstorage.assets:FindFirstChild("dh") and replicatedstorage.assets.dh:FindFirstChild("MainEvent"), arg = 'UpdateMousePos', override = {[1] = 1, [2] = 1}},

    [4204799886] = {remote = replicatedstorage:FindFirstChild('Events') and replicatedstorage.Events:FindFirstChild('RemoteEvent'), arg = 'shoot'}, -- position is in a table -- Five Duels

    [4550058213] = {remote = replicatedstorage:FindFirstChild('Remote'), arg = 'UpdateMousePos'}, -- DAT

    [1958807588] = {remote = replicatedstorage:FindFirstChild('Bullets'), arg = 'MousePos', override = 'P', place_id = 15781289939}, -- Hood Modded
    [1958807588] = {remote = replicatedstorage:FindFirstChild('MainEvent'), arg = 'UpdateMousePos', override = {['MousePos'] = position, ['Camera'] = position}, place_id = 15781289938} -- Hood Modded
}

local game_data = games[game.GameId]
local remote, remote_args, remote_override;

if (game_data and game_data.place_id) then
    for _, data in pairs(games) do
        if (data.place_id == game.PlaceId) then
            game_data = data
            break
        end
    end
end

if (game_data) then 
    remote_override = rawget(game_data, 'override')
    remote = game_data.remote 
    remote_args = game_data.arg
end

-- // Drawings \\ -- 
local triggerbot_fov_box, anti_lock_visible, silent_fov_circle, silent_fov_circle_outline, cam_fov_circle, cam_fov_circle_outline, fov_point, fov_target; do 
    triggerbot_fov_box = Drawing.new('Square')
    triggerbot_fov_box.Color = StoredHook.Triggerbot.FOV.Color
    triggerbot_fov_box.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook.Triggerbot.FOV.Visible
    triggerbot_fov_box.Thickness = 1

    anti_lock_visible = Drawing.new('Square')
    anti_lock_visible.Radius = 3
    anti_lock_visible.Color = Color3.new(0, 255, 0)
    anti_lock_visible.Visible = hidden_settings.panic and hidden_settings.esp_toggle
    anti_lock_visible.Filled = false
    anti_lock_visible.Thickness = 1

    silent_fov_circle = Drawing.new('Circle')
    silent_fov_circle.Radius = StoredHook['Silent Aim'].FOV.Radius
    silent_fov_circle.Color = StoredHook['Silent Aim'].FOV.Color
    silent_fov_circle.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook['Silent Aim'].FOV.Visible
    silent_fov_circle.Thickness = 1
    silent_fov_circle.ZIndex = 2

    silent_fov_circle_outline = Drawing.new('Circle')
    silent_fov_circle_outline.Radius = StoredHook['Silent Aim'].FOV.Radius
    silent_fov_circle_outline.Color = Color3.fromRGB()
    silent_fov_circle_outline.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook['Silent Aim'].FOV.Visible
    silent_fov_circle_outline.Thickness = 3
    silent_fov_circle_outline.ZIndex = 1
    
    cam_fov_circle = Drawing.new('Circle')
    cam_fov_circle.Radius = StoredHook.Camlock.FOV.Radius
    cam_fov_circle.Color = StoredHook.Camlock.FOV.Color
    cam_fov_circle.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook.Camlock.FOV.Visible
    cam_fov_circle.Thickness = 1
    cam_fov_circle.ZIndex = 2

    cam_fov_circle_outline = Drawing.new('Circle')
    cam_fov_circle_outline.Radius = StoredHook.Camlock.FOV.Radius
    cam_fov_circle_outline.Color = Color3.fromRGB()
    cam_fov_circle_outline.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook.Camlock.FOV.Visible
    cam_fov_circle_outline.Thickness = 3
    cam_fov_circle_outline.ZIndex = 1

    fov_point = Drawing.new('Circle')
    fov_point.Filled = true
    fov_point.Radius = 1
    fov_point.Color = StoredHook.Target.Color

    fov_target = Drawing.new('Circle')
    fov_target.Filled = true
    fov_target.Radius = 1
    fov_target.Color = StoredHook.Target.Color

    tracking_tracker = Drawing.new('Line')
    tracking_tracker.Thickness = 1 
end


-- // Functions \\ -- 
local get_char, get_root, get_hum, get_mouse, draw, on_key, off_key, is_alive, get_player_mouse, part_to_mouse, point_to_mouse, get_calculated_velocity, get_prediction, get_velocity, is_jumping, is_falling, get_jump, update_pos, apply_silent, on_tool, get_closest_armor, get_closest_weapon, bullet_added, background_loop, on_character_added, on_player_added, sort_inventory, apply_anti, get_crew, builtin_macro_function; do 
    get_char = LPH_NO_VIRTUALIZE(function(player)
        return player.Character
    end)

    get_root = LPH_NO_VIRTUALIZE(function(char)
        return char and char:FindFirstChild('HumanoidRootPart')
    end)

    get_hum = LPH_NO_VIRTUALIZE(function(char) 
        return char and char:FindFirstChildWhichIsA('Humanoid')
    end)

    get_mouse = LPH_NO_VIRTUALIZE(function()
        return userinputservice:GetMouseLocation()
    end)

    draw = LPH_NO_VIRTUALIZE(function(obj, prop)
        local a = Drawing.new(obj)
        for _, v in pairs(prop) do 
            a[_] = v 
        end 
        return a
    end)

    on_key = LPH_NO_VIRTUALIZE(function(input, typing)
        if (typing) then return end 
        local toggle_player = (StoredHook['Silent Aim'].Activate:lower() == 'toggle' and StoredHook['Silent Aim'].Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook['Silent Aim'].Keybind:upper()] and get_player_mouse(nil, StoredHook['Silent Aim'].FOV.Radius, StoredHook['Camlock'].FOV.Radius)[3]) or (StoredHook['Silent Aim'].Activate:lower() == 'toggle' and StoredHook.Target.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Target.Keybind:upper()] and get_player_mouse(nil, StoredHook['Silent Aim'].FOV.Radius, StoredHook['Camlock'].FOV.Radius)[3])

        if (StoredHook['Silent Aim'].Activate:lower() == 'toggle') then 
            if (StoredHook.Target.Keybind == '') then 
                if (StoredHook['Silent Aim'].Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook['Silent Aim'].Keybind:upper()]) then
                    hidden_settings.silent_aim = not hidden_settings.silent_aim
                end
            else 
                if (StoredHook['Silent Aim'].Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook['Silent Aim'].Keybind:upper()]) then
                    hidden_settings.silent_aim = toggle_player and true or (current_target and current_target == toggle_player) and false

                    if (StoredHook.Misc.Notifications['Silent Aim']) then 
                        startergui:SetCore('SendNotification', {
                            Title = 'Silent Aim',
                            Text = toggle_player and 'Enabled' or 'Disabled'
                        })
                    end
                end
            end
        end

        if (StoredHook.Camlock.Activate:lower() == 'toggle') then
            if (StoredHook.Target.Keybind == '') then 
                if (StoredHook.Camlock.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Camlock.Keybind:upper()]) then 
                    hidden_settings.cam_aim = not hidden_settings.cam_aim
                end
            else
                if (StoredHook.Camlock.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Camlock.Keybind:upper()]) then 
                    hidden_settings.cam_aim = toggle_player and true or (current_target and current_target == toggle_player) and false

                    if (StoredHook.Misc.Notifications['Camera Lock']) then 
                        startergui:SetCore('SendNotification', {
                            Title = 'Camera Aim',
                            Text = hidden_settings.cam_aim and 'Enabled' or 'Disabled'
                        })
                    end
                end
            end
        end
        
        if (StoredHook['Silent Aim'].Activate:lower() == 'hold' and StoredHook['Silent Aim'].Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook['Silent Aim'].Keybind:upper()]) then 
            hidden_settings.silent_aim = true    

            if (StoredHook.Misc.Notifications['Silent Aim']) then 
                startergui:SetCore('SendNotification', {
                    Title = 'Silent Aim',
                    Text = hidden_settings.silent_aim and 'Enabled' or 'Disabled'
                })
            end
        end

        if (StoredHook.Camlock.Activate:lower() == 'hold' and StoredHook.Camlock.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Camlock.Keybind:upper()]) then 
            hidden_settings.cam_aim = true

            if (StoredHook.Misc.Notifications['Camera Lock']) then 
                startergui:SetCore('SendNotification', {
                    Title = 'Camera Aim',
                    Text = hidden_settings.cam_aim and 'Enabled' or 'Disabled'
                })
            end
        end
    
        if (StoredHook.Triggerbot.Activate:lower() == 'toggle' and StoredHook.Triggerbot.Enabled and input.KeyCode == Enum.KeyCode[StoredHook.Triggerbot.Keybind:upper()]) then 
            hidden_settings.triggerbot = not hidden_settings.triggerbot
        end
    
        if (StoredHook.Triggerbot.Activate:lower() == 'hold' and StoredHook.Triggerbot.Enabled and input.KeyCode == Enum.KeyCode[StoredHook.Triggerbot.Keybind:upper()]) then 
            hidden_settings.triggerbot = true
        end

        if (StoredHook.Misc.Animations.Enabled) then 
            if (input.KeyCode == Enum.KeyCode[StoredHook.Misc.Animations.Lay:upper()]) then 
                replicatedstorage:FindFirstChild("MainEvent"):FireServer('AnimationPack', 'Lay')
            elseif (input.KeyCode == Enum.KeyCode[StoredHook.Misc.Animations.Greet:upper()]) then 
                replicatedstorage:FindFirstChild("MainEvent"):FireServer('AnimationPack', 'Greet')
            end
        end
    
        if (StoredHook.Macro.Speed.Enabled) then 
            if (StoredHook.Macro.Speed.Mode:lower() == 'toggle' and input.KeyCode == Enum.KeyCode[StoredHook.Macro.Speed.Keybind:upper()]) then 
                hidden_settings.builtin_macro = not hidden_settings.builtin_macro 
            end

            if (StoredHook.Macro.Speed.Mode:lower() == 'hold' and input.KeyCode == Enum.KeyCode[StoredHook.Macro.Speed.Keybind:upper()]) then 
                hidden_settings.builtin_macro = true
            end
        end

        if (StoredHook['Anti Aim'].Enabled) then 
            if (StoredHook['Anti Aim'].Activate:lower() == 'toggle' and input.KeyCode == Enum.KeyCode[StoredHook['Anti Aim'].Keybind:upper()]) then 
                hidden_settings.anti_lock = not hidden_settings.anti_lock

                if (StoredHook.Misc.Notifications['Anti Aim']) then 
                    startergui:SetCore('SendNotification', {
                        Title = 'AntiLock',
                        Text = hidden_settings.anti_lock and 'Enabled' or 'Disabled'
                    })
                end

                if (not hidden_settings.anti_lock) then
                    apply_anti(false)
                end
            end

            if (StoredHook['Anti Aim'].Activate:lower() == 'hold' and input.KeyCode == Enum.KeyCode[StoredHook['Anti Aim'].Keybind:upper()]) then 
                hidden_settings.anti_lock = true

                if (StoredHook.Misc.Notifications['Anti Aim']) then 
                    startergui:SetCore('SendNotification', {
                        Title = 'AntiLock',
                        Text = hidden_settings.anti_lock and 'Enabled' or 'Disabled'
                    })
                end
            end
        end
        
        if (StoredHook.Macro.Noclip.Enabled) then 
            if (StoredHook.Macro.Noclip.Activate:lower() == 'toggle' and input.KeyCode == Enum.KeyCode[StoredHook.Macro.Noclip.Keybind:upper()]) then 
                hidden_settings.no_clip_macro = not hidden_settings.no_clip_macro
            end

            if (StoredHook.Macro.Noclip.Activate:lower() == 'toggle' and input.KeyCode == Enum.KeyCode[StoredHook.Macro.Noclip.Keybind:upper()]) then 
                hidden_settings.no_clip_macro = true
            end
        end

        if (StoredHook.Target.Activate:lower() == 'toggle') then 
            if (StoredHook.Target.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Target.Keybind:upper()]) then 
                if (current_target and current_target == toggle_player) then
                    hidden_settings.lockon = false
                    current_target = nil
                else
                    hidden_settings.lockon = toggle_player and true
                    current_target = hidden_settings.lockon and toggle_player
                end
            end
        end
        
        if (StoredHook.Target.Activate:lower() == 'hold') then 
            if (StoredHook.Target.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Target.Keybind:upper()]) then 
                hidden_settings.lockon = true
            end
        end

        if (StoredHook.Misc.Raid.Enabled) then 
            if (input.KeyCode == Enum.KeyCode[StoredHook.Misc.Raid.Keybind:upper()]) then 
                local current_player = get_player_mouse(nil, StoredHook.Misc.Raid['Grab Radius'], nil, true)[3]

                if (current_player) then
                    local visual_player = visuals:esp_active(current_player)

                    if (visual_player) then 
                        visual_player:remove_esp()
                    else 
                        visuals:add_player(current_player)
                    end 
                end
            end
        end

        if (StoredHook.Inventory.Enabled and input.KeyCode == Enum.KeyCode[StoredHook.Inventory.Keybind:upper()]) then 
            sort_inventory()
        end

        if (StoredHook.Misc['Toggle Visuals'] ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Misc['Toggle Visuals']:upper()]) then 
            hidden_settings.esp_toggle = not hidden_settings.esp_toggle

            if (StoredHook.Misc.Notifications['Toggle Visuals']) then 
                startergui:SetCore('SendNotification', {
                    Title = 'Visuals',
                    Text = hidden_settings.esp_toggle and 'Enabled' or 'Disabled'
                })
            end
        end

        if (StoredHook.Misc['Panic'] ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Misc['Panic']:upper()]) then 
            hidden_settings.panic = not hidden_settings.panic 

            if (StoredHook.Misc.Notifications['Panic']) then 
                startergui:SetCore('SendNotification', {
                    Title = 'Panic',
                    Text = hidden_settings.panic and 'Enabled' or 'Disabled'
                })
            end
        end

        if (input.UserInputType == Enum.UserInputType.MouseButton2) then
            hidden_settings.right_click_held = true
        end

        if (StoredHook.Camlock.Spin.Enabled) then 
            if (input.KeyCode == Enum.KeyCode[StoredHook.Camlock.Spin.Keybind:upper()]) then 
                local char = client.Character 
                local root = char and char:FindFirstChild('HumanoidRootPart')
                
                local start_cframe = camera.CFrame
                local end_cframe = start_cframe * CFrame.Angles(0, math.rad(360), 0)
                
                for i = 0, 360, StoredHook.Camlock.Spin.Speed do
                    local angle = math.rad(i)
                    local offset = CFrame.new((mouse.Hit.Position - root.Position).X, 0, 0)
                    camera.CFrame = start_cframe * offset * CFrame.Angles(0, angle, 0)
                    task.wait()
                end
                camera.CFrame = end_cframe
            end
        end
    end)

    off_key = LPH_NO_VIRTUALIZE(function(input, typing)
        if (typing) then return end 

        if (StoredHook['Silent Aim'].Activate:lower() == 'hold' and StoredHook['Silent Aim'].Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook['Silent Aim'].Keybind:upper()]) then 
            hidden_settings.silent_aim = false

            if (StoredHook.Misc.Notifications['Silent Aim']) then 
                startergui:SetCore('SendNotification', {
                    Title = 'Silent Aim',
                    Text = hidden_settings.silent_aim and 'Enabled' or 'Disabled'
                })
            end
        end

        if (StoredHook.Camlock.Activate:lower() == 'hold' and StoredHook.Camlock.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Camlock.Keybind:upper()]) then 
            hidden_settings.cam_aim = false

            if (StoredHook.Misc.Notifications['Camera Lock']) then 
                startergui:SetCore('SendNotification', {
                    Title = 'Camera Aim',
                    Text = hidden_settings.cam_aim and 'Enabled' or 'Disabled'
                })
            end
        end

        if (StoredHook.Triggerbot.Activate:lower() == 'hold' and StoredHook.Triggerbot.Enabled and input.KeyCode == Enum.KeyCode[StoredHook.Triggerbot.Keybind:upper()]) then 
            hidden_settings.triggerbot = false
        end

        if (StoredHook.Macro.Speed.Enabled and StoredHook.Macro.Speed.Mode:lower() == 'hold' and input.KeyCode == Enum.KeyCode[StoredHook.Macro.Speed.Keybind:upper()]) then 
            hidden_settings.builtin_macro = false 
        end

        if (StoredHook.Target.Activate:lower() == 'hold' and StoredHook.Target.Keybind ~= '' and input.KeyCode == Enum.KeyCode[StoredHook.Target.Keybind:upper()]) then 
            hidden_settings.lockon = false
            current_target = nil
        end

        if (StoredHook['Anti Aim'].Enabled and StoredHook['Anti Aim'].Activate:lower() == 'hold' and input.KeyCode == Enum.KeyCode[StoredHook['Anti Aim'].Keybind:upper()]) then 
            hidden_settings.anti_lock = false
            apply_anti(false)

            if (StoredHook.Misc.Notifications['Anti Aim']) then 
                startergui:SetCore('SendNotification', {
                    Title = 'AntiLock',
                    Text = hidden_settings.anti_lock and 'Enabled' or 'Disabled'
                })
            end
        end

        if (StoredHook.Macro.Noclip.Enabled and StoredHook.Macro.Noclip.Activate:lower() == 'hold' and input.KeyCode == Enum.KeyCode[StoredHook.Macro.Noclip.Keybind:upper()]) then 
            hidden_settings.no_clip_macro = false
        end

        if (input.UserInputType == Enum.UserInputType.MouseButton2) then
            hidden_settings.right_click_held = false
        end
    end)

    retrieve_ping = function()
        local ping;
        
        xpcall(function()
            ping = stats.Network.ServerStatsItem["Data Ping"]:GetValue()
        end, function()
            ping = tonumber(ping_gui.Text:split(' ')[1])
        end)

        return ping
    end

    get_prediction = LPH_NO_VIRTUALIZE(function()
        local ping = retrieve_ping()

        if (ping > 10 and ping < 20) then 
            return StoredHook.Prediction.Ping['10_20'] or 0.09
        elseif (ping > 20 and ping < 30) then 
            return StoredHook.Prediction.Ping['20_30'] or  0.113 
        elseif (ping > 30 and ping < 40) then 
            return StoredHook.Prediction.Ping['30_40'] or 0.12588
        elseif (ping > 40 and ping < 50) then 
            return StoredHook.Prediction.Ping['40_50'] or 0.125
        elseif (ping > 50 and ping < 60) then 
            return StoredHook.Prediction.Ping['50_60'] or 0.127668
        elseif (ping > 60 and ping < 70) then
            return StoredHook.Prediction.Ping['60_70'] or 0.12731
        elseif (ping > 70 and ping < 80) then 
            return StoredHook.Prediction.Ping['70_80'] or 0.119
        elseif (ping > 80 and ping < 90) then 
            return StoredHook.Prediction.Ping['80_90'] or 0.1347
        elseif (ping > 90 and ping < 100) then 
            return StoredHook.Prediction.Ping['90_100'] or 0.136
        elseif (ping > 100 and ping < 110) then 
            return StoredHook.Prediction.Ping['100_110'] or 0.13034
        elseif (ping > 110 and ping < 120) then 
            return StoredHook.Prediction.Ping['110_120'] or 0.1455
        elseif (ping > 120 and ping < 130) then 
            return StoredHook.Prediction.Ping['120_130'] or 0.143765
        elseif (ping > 130 and ping < 140) then 
            return StoredHook.Prediction.Ping['130_140'] or 0.1223333
        elseif (ping > 140 and ping < 150) then
            return StoredHook.Prediction.Ping['140_150'] or 0.165773
        elseif (ping > 150 and ping < 160) then
            return StoredHook.Prediction.Ping['150_160'] or 0.1514
        elseif (ping > 160 and ping < 170) then
            return StoredHook.Prediction.Ping['160_170'] or 0.171
        elseif (ping > 170 and ping < 180) then
            return StoredHook.Prediction.Ping['170_180'] or 0.1823111
        elseif (ping > 180 and ping < 190) then
            return StoredHook.Prediction.Ping['180_190'] or 0.1848
        elseif (ping > 190 and ping < 200) then
            return StoredHook.Prediction.Ping['190_200'] or 0.1865
        else
            return tonumber("0.1" .. string.sub(tostring(ping), 1, 2)) - 0.02
        end
    
        return 0
    end)

    get_player_mouse = LPH_NO_VIRTUALIZE(function(override, silent_fov_radius, cam_fov_radius, avoid_alive_check)
        local override_mode, player_starget, player_ctarget, player = false
        local dist_starget, dist_ctarget = silent_fov_radius or 100, cam_fov_radius or 100
    
        if (override) then
            if is_alive(override) and get_char(override) and get_root(get_char(override)) and (not StoredHook.Checks.Wall or is_visible(override)) then
                player = override
                override_mode = true
            end
        else
            local got_mouse = get_mouse()
            for i, v in pairs(players:GetPlayers()) do 
                if (v == client) then continue end

                local char = get_char(v)
                local root = get_root(char)
                if not (char and root) then continue end

                local position, onscreen = camera:WorldToViewportPoint(root.Position)
                if (not onscreen) then continue end

                local mag = (Vector2.new(position.x, position.y) - got_mouse).magnitude 
                if not (mag < dist_starget or mag < dist_ctarget) then continue end
                if (StoredHook.Misc.Raid.Enabled and StoredHook.Misc.Raid['Target Raid Players'] and not visuals:esp_active(v) and not avoid_alive_check) then continue end

                local checks = (avoid_alive_check or is_alive(v)) and is_visible(v)

                if (mag < dist_starget) then 
                    if (StoredHook.Checks.Wall and not checks) then continue end
                    
                    player_starget = v
                    player = v

                    dist_starget = mag
                end

                if (mag < dist_ctarget) then 
                    if (StoredHook.Checks.Wall and not checks) then continue end
                    
                    player_ctarget = v
                    player = v

                    dist_ctarget = mag 
                end
            end
        end

        return override_mode and {player, player, player} or {player_starget, player_ctarget, player}
    end)

    is_alive = LPH_NO_VIRTUALIZE(function(player)
        local t_char = get_char(player)
        if (not t_char) then return false end 

        local forcefield = t_char and t_char:FindFirstChildOfClass("ForceField")
        if (StoredHook.Checks.ForceField and forcefield) then return false end 

        local t_humanoid = t_char and t_char:FindFirstChildOfClass("Humanoid");
        if (not t_humanoid or (t_humanoid.Health <= 0 and StoredHook.Checks.Alive) or game.GameId == 4204799886 and (t_humanoid:GetAttribute('Ragdoll') and StoredHook.Checks.Knocked)) then return false end 

        local BodyEffects = t_char and t_char:FindFirstChild("BodyEffects");
        local ragdolled = BodyEffects and BodyEffects:FindFirstChild('Ragdolled')
        local KO = BodyEffects and BodyEffects:FindFirstChild("K.O");

        local I_LOADED_I = t_char and t_char:FindFirstChild("I_LOADED_I");
        local KOHoodModded = I_LOADED_I and I_LOADED_I:FindFirstChild("K.O");

        local GrabbingConstraint = t_char and t_char:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
        local KnockedBy = t_char and t_char:FindFirstChild("KNOCKED_BY") ~= nil

        local state = t_char and t_char:FindFirstChild('State')
        local downed = state and state:FindFirstChild('Down')

        if (game.GameId == 4550058213 and state and downed and downed.Value and StoredHook.Checks.Knocked) then return false end -- DAT
        if ((game.GameId == 4436053088 or game.GameId == 3712280414 or game.GameId == 4468308086) and t_char:FindFirstChild('Head') and t_char.Head:FindFirstChild('limb') and StoredHook.Checks.Knocked) then return false end -- Sandbox Hood, Da Downhill, Da Casino
        if (game.GameId == 4259512497 and ragdolled and ragdolled.Value) then return false end

        if StoredHook.Checks.Knocked and (((KO and KO.Value) or (I_LOADED_I and KOHoodModded.Value)) or KnockedBy) then return false end
        if StoredHook.Checks.Grabbed and GrabbingConstraint then return false end

        return true
    end)

    is_visible = LPH_NO_VIRTUALIZE(function(player)
        local char = get_char(client)
        local pchar = get_char(player)
        local root = char and get_root(pchar)
        
        if (char and root and pchar) then
            raycast_params.FilterDescendantsInstances = {camera, char}
            local camera_position = camera.CFrame.Position
            local vector = root.Position - camera_position

            local result = raycast(workspace, camera_position, vector, raycast_params)
            
            return (result and result.Instance:IsDescendantOf(pchar))
        end

        return false
    end)

    part_to_mouse = LPH_NO_VIRTUALIZE(function(player, fov, hitparts)
        local nearest_part = nil
        local dist = math.huge
        
        if (player) then 
            local enemy_char = get_char(player)
            local got_mouse = get_mouse()
            
            if (enemy_char) then
                for i, part in pairs(enemy_char:GetChildren()) do 
                    if (not part:IsA('BasePart')) then continue end
                    
                    local position, onscreen = camera:WorldToViewportPoint(part.Position)
                    if (not onscreen) then continue end

                    local mag = (Vector2.new(position.x, position.y) - got_mouse).magnitude 
                    local test_part = (#hitparts == 0 and part) or (table.find(hitparts, part.Name) and part)
                    
                    if (mag < dist and test_part) then 
                        dist = mag
                        nearest_part = test_part
                    end
                end
            end
        end

        return nearest_part
    end)

    point_to_mouse = function(player, pos, hitparts)
        local nearest_part = part_to_mouse(player, pos, hitparts)
        if (not nearest_part) then return end

        local to_object_space = nearest_part.CFrame:PointToObjectSpace(mouse.Hit.Position)
        local half_size = nearest_part.Size / 2

        return nearest_part.CFrame * Vector3.new(math.clamp(to_object_space.x, -half_size.x, half_size.x), math.clamp(to_object_space.y, -half_size.y, half_size.y), math.clamp(to_object_space.z, -half_size.z, half_size.z))
    end

    get_calculated_velocity = function(obj)
        local character = get_char(obj)
        local root = get_root(character)
        local velocity = Vector3.new()
        
        if (character and root) then 
            local current_pos = root.Position
            local current_time = os.clock()
            
            task.wait(1/30)
            
            local new_pos = root.Position
            local new_time = os.clock()
            
            local final_time = new_time - current_time
            velocity = (new_pos - current_pos) / final_time
        end
        
        return velocity
    end

    get_velocity = LPH_NO_VIRTUALIZE(function(target)
        local char = get_char(target)
        local root = get_root(char)

        if (char and root) then 
            if (StoredHook.Misc['Force Resolver']) or (root.AssemblyLinearVelocity.X > 50 or root.AssemblyLinearVelocity.Y > 50 or root.AssemblyLinearVelocity.Z > 50 or root.AssemblyLinearVelocity.X < -50 or root.AssemblyLinearVelocity.Y < -50 or root.AssemblyLinearVelocity.Z < -50) then 
                return target_velocity or Vector3.new()
            else 
                return root.AssemblyLinearVelocity
            end
        end

        return target_velocity or Vector3.new()
    end)

    is_jumping = function(target)
        local t_char = get_char(target)
        local t_humanoid = get_hum(t_char)

        if (t_char and t_humanoid) then 
            local all_anims = t_char:FindFirstChild('Animate')
            local jump = all_anims and all_anims:FindFirstChild('jump')
            local jump_anim = jump and jump:FindFirstChildWhichIsA('Animation')
    
            if (all_anims and jump and jump_anim) then 
                local tracks = t_humanoid:GetPlayingAnimationTracks()
    
                for i, anim in pairs(tracks) do 
                    local id = anim.Animation.AnimationId
                    if (id == jump_anim.AnimationId) then
                        return true
                    end
                end
            end
        end
    
        return false
    end
    
    is_falling = function(target)
        local t_char = get_char(target)
        local t_humanoid = get_hum(t_char)
    
        if (t_char and t_humanoid) then 
            local all_anims = t_char:FindFirstChild('Animate')
            local fall = all_anims and all_anims:FindFirstChild('fall')
            local fall_anim = fall and fall:FindFirstChildWhichIsA('Animation')
    
            if (all_anims and fall and fall_anim) then 
                local tracks = t_humanoid:GetPlayingAnimationTracks()
    
                for i, anim in pairs(tracks) do 
                    local id = anim.Animation.AnimationId
                    if (id == fall_anim.AnimationId) then
                        return true
                    end
                end
            end
        end
    
        return false
    end
    
    get_jump = function(target)
        local t_char = get_char(target)
        local t_humanoid = get_hum(t_char)
        local t_root = get_root(t_char)

        local char = get_char(client)
        local root = get_root(char)

        local got_velocity = t_char and t_root and t_humanoid and get_velocity(target)
    
        if (char and root and t_char and t_root and t_humanoid) then
            if (is_jumping(target)) then 
                local predicted_height = got_velocity.Y

                return predicted_height / (StoredHook.Prediction['Jump Offset'] or 1)

            elseif (is_falling(target)) then 
                local predicted_fall = math.max(got_velocity.Y / (StoredHook.Prediction['Fall Offset'] or 1), -15)

                return predicted_fall
            end
        end

        return 0
    end
    
    update_pos = function(position)
        if (not game_data) then return end 

        if (typeof(remote_override) == 'table') then 
            if (rawget(remote_override, 'MousePos')) then 
                remote_override.MousePos = position
                remote_override.Camera = position
            else
                remote_override[1] = position
                remote_override[2] = position
            end

            remote:FireServer(remote_args, remote_override)
        elseif (typeof(remote_override) == 'string') then 
            remote:FireServer(remote_args, position, remote_override)
        elseif (typeof(remote_override) == 'Vector3') then 
            remote:FireServer(remote_args, {position})
        else
            remote:FireServer(remote_args, position)
        end
    end

    apply_silent = LPH_NO_VIRTUALIZE(function()
        local calculated = (math.random(0, 100) <= (StoredHook['Silent Aim']['Hit Part'].Chance or 100))

        if (not hidden_settings.panic and hidden_settings.silent_aim and calculated and starget) then
            local char = get_char(starget)
            local root = get_root(char)

            if (char and root) then 
                local aim_target = (StoredHook['Silent Aim']['Hit Part'].Type:lower() == 'nearest point' and CFrame.new(point_to_mouse(starget, StoredHook['Silent Aim'].FOV.Radius, StoredHook['Silent Aim']['Hit Part'].Parts)) or StoredHook['Silent Aim']['Hit Part'].Type:lower() == 'nearest part' and part_to_mouse(starget, StoredHook['Silent Aim'].FOV.Radius, StoredHook['Silent Aim']['Hit Part'].Parts) or root)
                local playerpos, onscreen = camera:WorldToViewportPoint(aim_target.Position)
                local mag = (Vector2.new(playerpos.x, playerpos.y) - get_mouse()).magnitude

                if (onscreen and aim_target and mag < StoredHook['Silent Aim'].FOV.Radius) then
                    local ping_amt = (StoredHook.Prediction.Ping.Enabled and get_prediction() or StoredHook.Prediction.Default)
                    local got_velocity = get_velocity(starget)
                    local jump_value = get_jump(starget)

                    update_pos(aim_target.Position + Vector3.new(got_velocity.x, jump_value, got_velocity.z) * Vector3.new(ping_amt, ping_amt - 0.055, ping_amt))
                end
            end
        end
    end)

    -- // Silent Aim \\ -- 
    on_tool = function(obj)
        if not (obj:IsA('Tool') and obj:FindFirstChildWhichIsA('Script')) then return end 

        if (weapon_connection) then
            weapon_connection:Disconnect()
            weapon_connection = nil
        end

        weapon_connection = obj.Activated:Connect(apply_silent)
    end

    get_closest_armor = LPH_NO_VIRTUALIZE(function(type)
        local dist, nearest_armor = 20
        local char = get_char(client)
        local root = get_root(char)

        if (char and root) then
            for i,v in pairs(armor_table) do
                if not v.Name:find(type) then continue end

                local mag = (v:GetPivot().Position - root.Position).magnitude
                
                if mag < dist then
                    nearest_armor = v
                end
            end
        end

        return nearest_armor
    end)

    get_closest_weapon = LPH_NO_VIRTUALIZE(function(type)
        local dist, nearest_weapon, nearest_ammo = 20
        local char = get_char(client)
        local root = get_root(char)

        if (char and root) then
            for i,v in pairs(weapons_table) do
                if not v.Name:find(type, 1, true) then continue end

                local mag = (v:GetPivot().Position - root.Position).magnitude
                
                if mag < dist then
                    if (v.Name:find('Ammo')) then
                        nearest_ammo = v
                    else
                        nearest_weapon = v
                    end
                end
            end
        end

        return nearest_weapon, nearest_ammo
    end)

    bullet_added = LPH_NO_VIRTUALIZE(function(obj)
        if (not StoredHook.Misc['Hit Detection'].Enabled) then return end

        local function verify_bullet(obj)
            return (obj.Name == 'BULLET_RAYS' or obj.Name:lower():find('bullet') or obj:WaitForChild('Attachment', 1) or obj:WaitForChild('GunBeam', 1)) and obj
        end
    
        local function verify_hit(position)
            local distance, target, hit_part = 2
    
            for _, plr in pairs(players:GetPlayers()) do 
                if (plr == client or not plr.Character) then continue end 
    
                for _, part in (plr.Character:GetChildren()) do 
                    if (not part:IsA('BasePart')) then continue end
    
                    local mag = (part.Position - position).magnitude
                    if (mag < distance) then 
                        distance = mag
                        target = plr 
                        hit_part = part 
                    end
                end
            end
    
            return target, hit_part
        end
    
        local char = get_char(client)
        local right_hand = char and char:FindFirstChild('RightHand')
    
        local bullet_ray = verify_bullet(obj)
        if (bullet_ray and right_hand) then 
            local mag = (right_hand.Position - bullet_ray.Position).magnitude 
    
            if (mag <= 7) then
                local gun_beam = bullet_ray:WaitForChild('GunBeam', 1)

                if (gun_beam) then 
                    local attachment1 = gun_beam.Attachment1
        
                    local hit_target, target_part = verify_hit(attachment1.WorldCFrame.Position)
                    if (hit_target) then 
                        hitmarker:add(target_part)
                    end
                end
            end
        end
    end)

    sort_inventory = function()
        local function get_food()
            for i,v in pairs(client:GetChildren()) do
                if v:IsA('Tool') and v:FindFirstChild('Eat') or v:FindFirstChild('Drink') then
                    return v
                end
            end
        end

        local holder_tool = {}
        local char = get_char(client)
        local hum = get_hum(char)
        local held_tool;

        if (hum and char:FindFirstChildWhichIsA('Tool')) then
            held_tool = char:FindFirstChildWhichIsA('Tool').Name
            char:FindFirstChildWhichIsA('Tool').Parent = client
        end
    
        for _, v in pairs(client.Backpack:GetChildren()) do 
            v.Parent = client
        end
    
        for i = 1, 10 do 
            local sort_settings = StoredHook.Inventory
            local sort = sort_settings.Assortment
            local returned_food = get_food()
            local tool = sort[i]

            if (tool and client:FindFirstChild(tool)) then
                client:FindFirstChild(tool).Parent = client.Backpack

            elseif (sort_settings['Sort Food'] and returned_food) then
                returned_food.Parent = client.Backpack

            else
                holder_tool[i] = Instance.new('Tool', client.Backpack)
                holder_tool[i].Name = ''
            end
        end
    
        for i, v in pairs(client:GetChildren()) do 
            if (not v:IsA('Tool')) then continue end 
            v.Parent = client.Backpack
        end

        for i,v in pairs(holder_tool) do
            v:Destroy()
        end
        
        if (held_tool and client.Backpack:FindFirstChild(held_tool) and char and hum) then
            hum:EquipTool(client.Backpack[held_tool])
        end
    end

    background_loop = LPH_NO_VIRTUALIZE(function()
        if (hidden_settings.panic) then 
            silent_fov_circle.Visible = false 
            silent_fov_circle_outline.Visible = false
            cam_fov_circle.Visible = false 
            cam_fov_circle_outline.Visible = false
            fov_point.Visible = false
            triggerbot_fov_box.Visible = false
            tracking_tracker.Visible = false
            fov_target.Visible = false 

            return
        end

        if (StoredHook.Target.Keybind == '' or (current_target == nil and hidden_settings.lockon)) then
            current_target = get_player_mouse(nil, StoredHook['Silent Aim'].FOV.Radius, StoredHook.Camlock.FOV.Radius)[3]
        end

        if (hidden_settings.lockon or current_target) and (not current_target or is_alive(current_target)) then
            starget, ctarget = unpack(get_player_mouse(current_target, StoredHook['Silent Aim'].FOV.Radius, StoredHook.Camlock.FOV.Radius))
        else
            current_target, starget, ctarget = nil, nil, nil

            if (StoredHook.Target.Keybind ~= '') then
                hidden_settings.cam_aim = false
                hidden_settings.silent_aim = false
                hidden_settings.lockon = false
            end
        end

        local universal_target = (current_target or starget or ctarget)
        if (universal_target) then
            task.spawn(function()
                target_velocity = get_calculated_velocity(universal_target)
            end)
        end

        local current_mouse_pos = get_mouse()
        
        silent_fov_circle.Position = current_mouse_pos
        silent_fov_circle.Radius = StoredHook['Silent Aim'].FOV.Radius
        silent_fov_circle.Color = StoredHook['Silent Aim'].FOV.Color
        silent_fov_circle.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook['Silent Aim'].FOV.Visible

        silent_fov_circle_outline.Position = current_mouse_pos
        silent_fov_circle_outline.Radius = StoredHook['Silent Aim'].FOV.Radius
        silent_fov_circle_outline.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook['Silent Aim'].FOV.Visible
        
        cam_fov_circle.Position = current_mouse_pos
        cam_fov_circle.Radius = StoredHook.Camlock.FOV.Radius
        cam_fov_circle.Color = StoredHook.Camlock.FOV.Color
        cam_fov_circle.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook.Camlock.FOV.Visible

        cam_fov_circle_outline.Position = current_mouse_pos
        cam_fov_circle_outline.Radius = StoredHook.Camlock.FOV.Radius
        cam_fov_circle_outline.Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook.Camlock.FOV.Visible

        fov_point.Color = StoredHook.Target.Color
        fov_target.Color = StoredHook.Target.Color

        -- Triggerbot
        if (StoredHook.Triggerbot.Enabled) then
            local triggerbot_root = universal_target and universal_target.Character and universal_target.Character:FindFirstChild('HumanoidRootPart')
            
            if (triggerbot_root) then
                local pos, onscreen = camera:WorldToViewportPoint(triggerbot_root.Position)

                if (onscreen) then
                    local ping_amt = (StoredHook.Prediction.Ping.Enabled and get_prediction() or StoredHook.Prediction.Default)
                    local got_velocity = get_velocity(universal_target)
                    local jump_value = get_jump(universal_target)

                    local pos, onscreen = camera:WorldToViewportPoint(triggerbot_root.Position + Vector3.new(got_velocity.x, jump_value, got_velocity.z) * Vector3.new(ping_amt, ping_amt - 0.055, ping_amt))

                    if (onscreen) then
                        local scale_factor = 1 / (pos.Z * tan(rad(camera.FieldOfView / 2)) * 2) * 1000
                        local width, height = round(StoredHook.Triggerbot.FOV.Width * scale_factor), round(StoredHook.Triggerbot.FOV.Height * scale_factor)
                        local x, y = round(pos.X), round(pos.Y)
                        local boxX, boxY = round(x - width / 2), round(y - height / 2)

                        local smoothing_factor = StoredHook.Triggerbot.FOV.Smoothing
                        local target_position = Vector2.new(round(x - width / 2), round(y - height / 2))
                        prev_position = (triggerbot_fov_box.Position and triggerbot_fov_box.Position ~= Vector2.new() and triggerbot_fov_box.Position or target_position) * (1 - smoothing_factor) + target_position * smoothing_factor

                        triggerbot_fov_box.Position = prev_position or target_position
                        triggerbot_fov_box.Color = StoredHook.Triggerbot.FOV.Color
                        triggerbot_fov_box.Visible = hidden_settings.esp_toggle and universal_target and onscreen and StoredHook.Triggerbot.FOV.Visible
                        triggerbot_fov_box.Size = Vector2.new(width, height)

                        local box_position = triggerbot_fov_box.Position
                        local box_size = triggerbot_fov_box.Size

                        if (is_visible(universal_target) and hidden_settings.triggerbot and os.clock() - last_clicked >= StoredHook.Triggerbot.Delay and current_mouse_pos.X >= box_position.X and current_mouse_pos.X <= box_position.X + box_size.X and current_mouse_pos.Y >= box_position.Y and current_mouse_pos.Y <= box_position.Y + box_size.Y) then
                            local char = get_char(client)

                            if (char and char:FindFirstChildOfClass('Tool') and char:FindFirstChildOfClass('Tool'):FindFirstChild('Ammo')) then
                                if (StoredHook.Triggerbot.Reload and char:FindFirstChildOfClass('Tool').Ammo.Value == 0 and os.clock() - last_reload > 0.1) then
                                    remote:FireServer('Reload', char:FindFirstChildOfClass('Tool'))
                                    last_reload = os.clock()
                                end
                                
                                char:FindFirstChildOfClass('Tool'):Activate()
                            end

                            last_clicked = os.clock()
                        end
                    end
                else
                    triggerbot_fov_box.Position = Vector2.new()
                    triggerbot_fov_box.Visible = false
                end
            else
                triggerbot_fov_box.Position = Vector2.new()
                triggerbot_fov_box.Visible = false
            end
        end

        -- Nearest Point / Tracer
        if (universal_target ~= nil) then 
            local t_char = get_char(universal_target)
            local t_root = get_root(t_char)

            if (t_char and t_root) then 
                if (StoredHook.Target.Show) then    
                    local pos, onscreen = camera:WorldToViewportPoint(t_root.Position)
                    local scale_factor_fov = 1 / (pos.Z * tan(rad(camera.FieldOfView / 2)) * 2) * 1000

                    if (onscreen) then 
                        local scale_factor_point = 1 / (pos.Z * tan(rad(camera.FieldOfView / 2)) * 2) * 250

                        fov_target.Position = Vector2.new(pos.x, pos.y)
                        fov_target.Radius = scale_factor_fov
                        fov_target.Visible = hidden_settings.panic and hidden_settings.esp_toggle and onscreen and StoredHook.Target.Show

                        if (StoredHook['Silent Aim']['Hit Part'].Type:lower() == 'nearest point') then 
                            local point = point_to_mouse(universal_target, StoredHook['Silent Aim'].FOV.Radius, StoredHook['Silent Aim']['Hit Part'].Parts)

                            if (point) then
                                local pos, onscreen = camera:WorldToViewportPoint(point)
                                if (onscreen) then
                                    fov_point.Position = Vector2.new(pos.x, pos.y)
                                    fov_point.Radius = scale_factor_point
                                    fov_point.Visible = hidden_settings.panic and hidden_settings.esp_toggle and (onscreen and StoredHook.Target.Show)
                                end
                            end
                        end
                    end
                end

                if (StoredHook.Misc.Tracer.Enabled) then 
                    local pos, onscreen = camera:WorldToViewportPoint(t_root.Position)

                    tracking_tracker.From = StoredHook.Misc.Tracer.From:lower() == 'bottom' and Vector2.new(camera.ViewportSize.x / 2, camera.ViewportSize.y / 1) or get_mouse()
                    tracking_tracker.To = Vector2.new(pos.x, pos.y)
                    tracking_tracker.Visible = hidden_settings.esp_toggle and StoredHook.Misc.Tracer.Enabled and onscreen
                    tracking_tracker.Color = StoredHook.Misc.Tracer.Color
                end
            else
                fov_point.Visible = false 
                fov_target.Visible = false
                tracking_tracker.Visible = false
            end
        else
            fov_point.Visible = false 
            fov_target.Visible = false
            tracking_tracker.Visible = false
        end

        -- Cam Shake
        if (os.clock() - last_delta_cam_shake >= 0.1 and not hidden_settings.panic) then
            vector_pos = (StoredHook.Camlock.Shake.Enabled and (Vector3.new(math.random(-StoredHook.Camlock.Shake.Amount.X, StoredHook.Camlock.Shake.Amount.X) / 100, math.random(-StoredHook.Camlock.Shake.Amount.Y, StoredHook.Camlock.Shake.Amount.Y) / 100, math.random(-StoredHook.Camlock.Shake.Amount.Z, StoredHook.Camlock.Shake.Amount.Z) / 100)) or Vector3.new())
            last_delta_cam_shake = os.clock()
        end

        if (StoredHook.Misc['Auto Buy'].Armor.Enabled and not hidden_settings.panic) then
            local playergui = client:FindFirstChild('PlayerGui')

            if (playergui) then
                local armor_bar = client.PlayerGui:FindFirstChild('MainScreenGui') and client.PlayerGui.MainScreenGui:FindFirstChild('Bar') and client.PlayerGui.MainScreenGui.Bar:FindFirstChild('Armor') and client.PlayerGui.MainScreenGui.Bar.Armor:FindFirstChild('bar')
                local fire_bar = client.PlayerGui:FindFirstChild('MainScreenGui') and client.PlayerGui.MainScreenGui:FindFirstChild('Bar') and client.PlayerGui.MainScreenGui.Bar:FindFirstChild('Armor') and client.PlayerGui.MainScreenGui.Bar.Armor:FindFirstChild('firebar')

                if (fire_bar and fire_bar.Size.X.Scale * 100 <= StoredHook.Misc['Auto Buy'].Armor['Minimum Fire Armor']) then
                    local armor = get_closest_armor('Fire')

                    if (armor) then
                        fireclickdetector(armor.ClickDetector)
                    end
                end

                if (armor_bar and armor_bar.Size.X.Scale * 100 <= StoredHook.Misc['Auto Buy'].Armor['Minimum High Armor']) then
                    local armor = get_closest_armor('High')

                    if (armor) then
                        fireclickdetector(armor.ClickDetector)
                    end
                end

                if (armor_bar and armor_bar.Size.X.Scale * 100 <= StoredHook.Misc['Auto Buy'].Armor['Minimum Medium Armor']) then
                    local armor = get_closest_armor('Medium')

                    if (armor) then
                        fireclickdetector(armor.ClickDetector)
                    end
                end
            end
        end

        if (hidden_settings.anti_lock and not hidden_settings.panic) then
            anti_lock_visible.Visible = hidden_settings.panic and hidden_settings.esp_toggle
            anti_lock_visible.Position = StoredHook['Anti Anti'].Visualize and StoredHook['Anti Anti'].Visualize:lower() == 'mouse' and current_mouse_pos or Vector2.new()
            
            if (last_anti_toggle or os.clock() - last_anti_toggled >= -1) then
                last_anti_toggle = not last_anti_toggle
                apply_anti(last_anti_toggle)
                last_anti_toggled = os.clock()
            end
        else
            if (anti_lock_visible.Visible) then
                anti_lock_visible.Visible = false
            end
        end

        if (StoredHook.Misc['Auto Buy'].Guns and next(StoredHook.Misc['Auto Buy'].Guns) ~= nil and not hidden_settings.panic) then
            for i,v in (StoredHook.Misc['Auto Buy'].Guns) do
                if (v.Enabled) then
                    local char = get_char(client)

                    if (char) then
                        local weapon, ammo = get_closest_weapon(i:gsub("[%[%]]", ""))

                        if (client.Backpack:FindFirstChild(i) or char:FindFirstChild(i)) then
                            if (ammo and client:FindFirstChild('DataFolder') and client.DataFolder:FindFirstChild('Inventory') and client.DataFolder.Inventory:FindFirstChild(i) and tonumber(client.DataFolder.Inventory[i].Value) <= v['Min Ammo']) then
                                fireclickdetector(ammo.ClickDetector)
                            end
                        elseif (weapon) then
                            fireclickdetector(weapon.ClickDetector)
                        end
                    end
                end
            end
        end

        if (hidden_settings.no_clip_macro and not hidden_settings.panic) then
            local char = get_char(client)
            local hum = get_hum(char)
            local get_noclip_tool = function()
                for i,v in pairs(coregui.RobloxGui.Backpack.Hotbar:GetChildren()) do
                    if v.Name:find(StoredHook.Macro.Noclip.Slot) then
                        return v.ToolName.Text
                    end
                end
            end
            
            if (hum) then
                local toolname = get_noclip_tool()
                if (client.Backpack:FindFirstChild(toolname)) then
                    hum:EquipTool(client.Backpack:FindFirstChild(toolname))
                else
                    hum:UnequipTools()
                end
            end
        end

        for _, v in pairs(esp_objects) do 
            v:update()
        end 

        for _, v in pairs(hitmarker_objs) do 
            v:update()
        end
    end)

    apply_anti = function(toggle)
        local char = get_char(client)
        local root = get_root(char)

        if (char and root) then
            sethiddenproperty(root, "NetworkIsSleeping", toggle)
        end
    end

    on_character_added = LPH_NO_VIRTUALIZE(function(char)
        if (charcon) then
            charcon:Disconnect()
            charcon = nil
        end
        
        charcon = char.ChildAdded:Connect(on_tool)
    end)

    on_player_added = LPH_NO_VIRTUALIZE(function(player)
        for i,v in pairs(esp_objects) do
            if (player.UserId == v.UserId or (StoredHook.Misc.Raid['Snipe Detection'] and player.FollowUserId == client.UserId)) then
                visuals:add_player(player)
                break
            end
        end
    end)

    get_crew = LPH_NO_VIRTUALIZE(function(target)
        if (target:FindFirstChild('DataFolder') and target.DataFolder:FindFirstChild('Information') and target.DataFolder.Information:FindFirstChild('Crew') and target.DataFolder.Information.Crew.Value ~= '') then
            return target.DataFolder.Information.Crew.Value
        end
    end)

    builtin_macro_function = function()
        if (StoredHook.Macro.Speed.Type == 'Ingame') then 
            if (not macro_in_use and os.clock() - last_macro_instruction >= (StoredHook.Macro.Speed.Delay or 0.020)) then
                task.spawn(function()
                    macro_in_use = true

                    if (StoredHook.Macro.Speed.Enabled and hidden_settings.builtin_macro) then 
                        if client.CameraMaxZoomDistance ~= 5.5 and client.CameraMinZoomDistance ~= 5.5 then
                            client.CameraMaxZoomDistance = 5.5
                            task.wait()
                            client.CameraMinZoomDistance = 5.5
                        else
                            local char = get_char(client)
                            local root = get_root(char)
                            local hum = get_hum(char)

                            if (char and root and hum) then
                                local middle_screen = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                                local look_position = camera:ViewportPointToRay(middle_screen.X / camera.ViewportSize.X, middle_screen.Y / camera.ViewportSize.Y, 0).Origin
                                local look_direction = (look_position - root.Position).unit

                                if (hum.FloorMaterial ~= Enum.Material.Air and hum:GetState() ~= Enum.HumanoidStateType.Physics and hum:GetState() ~= Enum.HumanoidStateType.Ragdoll) then 
                                    if (not hidden_settings.right_click_held) then
                                        mousemoveabs(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                                    end

                                    root.CFrame = CFrame.lookAt(root.Position, root.Position + Vector3.new(-look_direction.X, 0, -look_direction.Z))
                                end
                            end
                        end
                    else
                        client.CameraMaxZoomDistance = 30
                        task.wait()
                        client.CameraMinZoomDistance = 0.5
                    end
                    
                    last_macro_instruction = os.clock()
                    macro_in_use = false
                end)
            end
        else
            if (StoredHook.Macro.Speed.Enabled and hidden_settings.builtin_macro) then
                task.wait(StoredHook.Macro.Speed.Delay / 2)
                virtualinputmanager:SendMouseWheelEvent('0', '0', true, game)
                task.wait(StoredHook.Macro.Speed.Delay / 2)
                virtualinputmanager:SendMouseWheelEvent('0', '0', false, game)
            end
        end
    end
end

-- Visuals
LPH_NO_VIRTUALIZE(function()
    visuals.__index = visuals 

    function visuals:update()
        if (self.visible and self.instance) then 
            local character = self.instance.Character 
            local root = character and character:FindFirstChild('HumanoidRootPart')

            if (character and root) then 
                local pos, onscreen = camera:WorldToViewportPoint(root.Position)
                local scale_factor = 1 / (pos.Z * tan(rad(camera.FieldOfView / 2)) * 2) * 1000
                local width, height = round(4 * scale_factor), round(6 * scale_factor)
                local x, y = round(pos.X), round(pos.Y)

                local text_pos, text_onscreen = camera:WorldToViewportPoint((root.CFrame * CFrame.new(0, 3, 0)).p)
                self.drawings.text.Position = Vector2.new(text_pos.x, text_pos.y) - Vector2.new(0, self.drawings.text.TextBounds.y)
                self.drawings.text.Visible = hidden_settings.panic and hidden_settings.esp_toggle and text_onscreen
                self.drawings.text.Text = self.instance.Name

                self.drawings.square.Size = Vector2.new(width, height)
                self.drawings.square.Position = Vector2.new(round(x - width / 2), round(y - height / 2))
                self.drawings.square.Visible = hidden_settings.panic and hidden_settings.esp_toggle and onscreen
            else
                self.drawings.text.Visible = false
                self.drawings.square.Visible = false
            end
        end
    end

    function visuals:esp_active(player)
        for _, v in pairs(esp_objects) do 
            if (v.instance == player or v.UserId == player.UserId) then 
                return v
            end 
        end 

        return false
    end 

    function visuals:add_player(obj)
        local player = setmetatable({}, visuals)

        player.instance = obj
        player.UserId = obj.UserId
        player.visible = true
        player.drawings = {
            square = draw('Square', { 
                Thickness = 1
            }),
            text = draw('Text', {
                Size = 13,
                Center = true,
                Outline = true,
                OutlineColor = Color3.fromRGB(0, 0, 0)
            })
        }

        if (client:IsFriendsWith(player.instance.UserId) or (get_crew(client) and get_crew(player.instance) and get_crew(client) == get_crew(player.instance))) then 
            player.drawings.text.Color = StoredHook.Misc.Raid.Colors.Friendly
            player.drawings.square.Color = StoredHook.Misc.Raid.Colors.Friendly
        else 
            player.drawings.text.Color = StoredHook.Misc.Raid.Colors.ESP
            player.drawings.square.Color = StoredHook.Misc.Raid.Colors.ESP
        end

        function player:set_visible(bool)
            self.visible = hidden_settings.panic and hidden_settings.esp_toggle and bool
            self.drawings.square.Visible = hidden_settings.panic and hidden_settings.esp_toggle and bool 
            self.drawings.text.Visible = hidden_settings.panic and hidden_settings.esp_toggle and bool 
        end

        function player:remove_esp()
            self:set_visible(false)

            self.drawings.square:Remove()
            self.drawings.text:Remove()
            table.remove(esp_objects, table.find(esp_objects, player))
        end

        table.insert(esp_objects, player)
        return player 
    end
end)()

-- Hit Marker
LPH_NO_VIRTUALIZE(function()
    hitmarker.__index = hitmarker

    function hitmarker:update()
        if (not self.dead) then 
            local pos, onscreen = camera:WorldToViewportPoint(self.hitpart.Position)
            local new_pos = Vector2.new(pos.x, pos.y)

            self.drawings[1].From = new_pos + Vector2.new(-5, -5)
            self.drawings[1].To = new_pos + Vector2.new(-1, -1)

            self.drawings[2].From = new_pos + Vector2.new(-5, 5)
            self.drawings[2].To = new_pos+ Vector2.new(-1, 1)

            self.drawings[3].From = new_pos + Vector2.new(5, -5)
            self.drawings[3].To = new_pos + Vector2.new(1, -1)

            self.drawings[4].From = new_pos + Vector2.new(5, 5)
            self.drawings[4].To = new_pos+ Vector2.new(1, 1)

            for i = 1, 4 do 
                self.drawings[i].Visible = hidden_settings.panic and hidden_settings.esp_toggle and StoredHook.Misc['Hit Detection'].Enabled and onscreen 
                self.drawings[i].Color = StoredHook.Misc['Hit Detection'].Color
            end
        end
    end

    function hitmarker:add(hitpart)
        local hit = setmetatable({}, hitmarker)

        hit.hitpart = hitpart
        hit.drawings = {}
        hit.length = length
        hit.dead = false

        for i = 1, 4 do 
            hit.drawings[i] = draw('Line', {Thickness = 1})
        end 

        task.spawn(function()
            task.wait(1)
            for i = 1, 4 do 
                hit.drawings[i]:Remove()
            end

            self.dead = true
            table.remove(hitmarker_objs, table.find(hitmarker_objs, hit))
        end)

        
        table.insert(hitmarker_objs, hit)
        return hit 
    end
end)()

-- Cam Lock
LPH_NO_VIRTUALIZE(function()
    task.spawn(function()
        while (true) do 
            if (hidden_settings.cam_aim and ctarget and not hidden_settings.panic) then
                local char = get_char(ctarget)
                local root = get_root(char)

                if (char and root) then
                    local aim_target = (StoredHook.Camlock['Hit Part'].Type:lower() == 'nearest part' and part_to_mouse(ctarget, StoredHook.Camlock.FOV.Radius, StoredHook.Camlock['Hit Part'].Parts) or StoredHook.Camlock['Hit Part'].Type:lower() == 'nearest point' and CFrame.new(point_to_mouse(ctarget, StoredHook.Camlock.FOV.Radius, StoredHook.Camlock['Hit Part'].Parts)))

                    if (aim_target) then
                        local ping_amt = (StoredHook.Prediction.Ping.Enabled and get_prediction() or StoredHook.Prediction.Default)
                        local got_velocity = get_velocity(ctarget)
                        local jump_value = get_jump(ctarget)
                        local aim_position = aim_target.Position + Vector3.new(got_velocity.x, jump_value, got_velocity.z) * Vector3.new(ping_amt, ping_amt - 0.055, ping_amt)
                        local playerposition, onscreen = camera:WorldToScreenPoint(aim_position + vector_pos)
                        local mag = (Vector2.new(playerposition.x, playerposition.y) - get_mouse()).magnitude

                        if (onscreen and mag < StoredHook.Camlock.FOV.Radius) then
                            if StoredHook.Camlock['Realistic Movement'].Enabled then
                                mousemoverel((playerposition.X / StoredHook.Camlock['Realistic Movement'].Smoothing.Horizontal) * (StoredHook.Camlock['Realistic Movement'].Sensitivity.Horizontal or 0.095) - (mouse.X / StoredHook.Camlock['Realistic Movement'].Smoothing.Horizontal) * StoredHook.Camlock['Realistic Movement'].Sensitivity.Horizontal, (playerposition.Y / StoredHook.Camlock['Realistic Movement'].Smoothing.Vertical) * StoredHook.Camlock['Realistic Movement'].Sensitivity.Vertical - (mouse.Y / StoredHook.Camlock['Realistic Movement'].Smoothing.Vertical) * (StoredHook.Camlock['Realistic Movement'].Sensitivity.Vertical or 0.095))
                            else
                                camera.CFrame = camera.CFrame:Lerp(CFrame.new(camera.CFrame.Position, aim_position + vector_pos), StoredHook.Camlock['Robotic Movement'].Sensitivity or 0.095, Enum.EasingStyle[StoredHook.Camlock['Robotic Movement'].Types.First or 'Elastic'], Enum.EasingDirection.InOut, Enum.EasingStyle[StoredHook.Camlock['Robotic Movement'].Types.Second or 'Bounce'])
                            end
                        end
                    end
                end
            end

            builtin_macro_function()
            runservice.PostSimulation:Wait()
        end
    end)
end)()

-- Connections
runservice.PostSimulation:Connect(background_loop)
userinputservice.InputBegan:Connect(on_key)
userinputservice.InputEnded:Connect(off_key)
players.PlayerAdded:Connect(on_player_added)
client.CharacterAdded:Connect(on_character_added)
workspace.DescendantAdded:Connect(bullet_added)

-- Background

task.spawn(function()
    if (client.Character) then
        charcon = client.Character.ChildAdded:Connect(on_tool)
    end

    LPH_NO_VIRTUALIZE(function()
        while not (client:FindFirstChild('PlayerGui') and client.PlayerGui:FindFirstChild('MainScreenGui') and client.PlayerGui.MainScreenGui.Enabled and client.PlayerGui.MainScreenGui:FindFirstChild('Crew') and client.PlayerGui.MainScreenGui.Crew.Visible and client:FindFirstChild('DataFolder') and client.DataFolder:FindFirstChild('Inventory')) do 
            task.wait() 
        end
    end)()
    
    if (workspace:FindFirstChild('Ignored') and workspace.Ignored:FindFirstChild('Shop')) then
        for i,v in pairs(workspace.Ignored.Shop:GetChildren()) do
            if (v.Name:find('Armor')) then
                table.insert(armor_table, v)
            end
    
            if (StoredHook.Misc['Auto Buy'].Guns and next(StoredHook.Misc['Auto Buy'].Guns) ~= nil) then
                for _, value in pairs(client.DataFolder.Inventory:GetChildren()) do
                    if (v.Name:find(value.Name:gsub("[%[%]]", ""), 1, true)) then
                        table.insert(weapons_table, v)
                    end
                end
            end
        end
    end

    if (StoredHook.Misc['Auto Settings'] and StoredHook.Misc['Auto Settings']['Low GFX'] or StoredHook.Misc['Auto Settings']['Mute Boombox'] and client:FindFirstChild('PlayerGui') and client.PlayerGui:FindFirstChild('MainScreenGui') and client.PlayerGui.MainScreenGui.Enabled and client.PlayerGui.MainScreenGui:FindFirstChild('Crew') and client.PlayerGui.MainScreenGui.Crew:FindFirstChild('Settings') and client.PlayerGui.MainScreenGui.Crew.Settings:FindFirstChild('Frame') and client.PlayerGui.MainScreenGui.Crew.Visible) then
        task.wait(1)
        if (StoredHook.Misc['Auto Settings']['Low GFX'] and client.PlayerGui.MainScreenGui.Crew.Settings.Frame.InnerFrame.List.LowGFX.SwitchFrame.Switch.BackgroundColor3 ~= Color3.new(0, 255, 0)) then
            getconnections(client.PlayerGui.MainScreenGui.Crew.Settings.Frame.InnerFrame.List.LowGFX.SwitchFrame.TextButton.MouseButton1Click)[1]:Function()
        end

        if (StoredHook.Misc['Auto Settings']['Mute Boombox'] and client.PlayerGui.MainScreenGui.Crew.Settings.Frame.InnerFrame.List.BoomBox.SwitchFrame.Switch.BackgroundColor3 ~= Color3.new(0, 255, 0)) then
            getconnections(client.PlayerGui.MainScreenGui.Crew.Settings.Frame.InnerFrame.List.BoomBox.SwitchFrame.TextButton.MouseButton1Click)[1]:Function()
        end
    end
end)

task.spawn(function()
    while (not ping_gui) do 
        if (coregui:FindFirstChild('RobloxGui') and coregui.RobloxGui:FindFirstChild('PerformanceStats')) then
            for i, v in pairs(coregui.RobloxGui.PerformanceStats:GetChildren()) do
                if (v:FindFirstChild('StatsMiniTextPanelClass') and v.StatsMiniTextPanelClass:FindFirstChild('ValueLabel') and v.StatsMiniTextPanelClass.ValueLabel.Text:find('ms')) then
                    ping_gui = v.StatsMiniTextPanelClass.ValueLabel
                end
            end
        end

        task.wait(1)
    end
end)


		end
	end
